security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator:
                - App\Security\AppCustomAuthenticator

            logout:
                path: /logout
                target: app_login

        api:
            pattern: ^/api
            stateless: true
            # Autres configurations pour le firewall api ici

    # Ajoutez d'autres configurations de sécurité ici si nécessaire

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/Creation_article, roles: [ROLE_AUTEUR, ROLE_EDITEUR, ROLE_ADMIN] }
        - { path: ^/ajout_media, roles: [ROLE_FOURNISSEUR, ROLE_ADMIN] }
        - { path: ^/ajout_csv, roles: [ROLE_FOURNISSEUR, ROLE_ADMIN] }
        - { path: ^/articlesmodifs, roles: [ROLE_AUTEUR, ROLE_EDITEUR, ROLE_ADMIN] }
        - { path: ^/moncompte, roles: [ROLE_AUTEUR, ROLE_EDITEUR, ROLE_ADMIN, ROLE_FOURNISSEUR, ROLE_ABONNE, ROLE_USER] }
        - { path: ^/articles, roles: [ROLE_AUTEUR, ROLE_EDITEUR, ROLE_ADMIN, ROLE_FOURNISSEUR, ROLE_ABONNE, ROLE_USER] }
        - { path: ^/lesarticles, roles: [ROLE_AUTEUR, ROLE_EDITEUR, ROLE_ADMIN, ROLE_FOURNISSEUR, ROLE_ABONNE, ROLE_USER] }
        - { path: ^/contact, roles: [ROLE_AUTEUR, ROLE_EDITEUR, ROLE_ADMIN, ROLE_FOURNISSEUR, ROLE_ABONNE, ROLE_USER] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
